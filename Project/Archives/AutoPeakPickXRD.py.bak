### General code outline ###

#This is for step zero of the code
#Intentions are to take an incoming pattern and identify the peak positions from a poor scan
#This code will then tell a second detector to move to those positions +/- 2theta

## Steps used to make the code work
#1 - Accept xy pattern, converting it into an x,y
#2 - Take dirty derivative of the pattern to get rise vs run
#This will tell us the general area of all peaks that are ~0 from + to -
#3 - Adjust magnitudes of which peaks are caught by test
#3a - Possibly use early data as a background identifier
#4 - 

#Import all the python libraries needed
import time
import os
import shutil
import pandas as pd
import numpy as genfromtxt
import numpy as np

#Ask for xy file
#Current code will be nested in xy file
xyfile = input('What is the xy file? ')

#Open xy file and turn into an array
xyOpen = np.genfromtxt(xyfile, dtype=float, delimiter='\t')

#Split into radians and observed
xyDeg = xyOpen[:,0]
xyObs = xyOpen[:,1]

#Get first and second "derivatives"
xyD1 = []
xyD2 = []
for row in range(0, len(xyObs)-1):
    xyDiff = xyObs[row + 1] - xyObs[row]
    xyD1.append(xyDiff)
xyD1.append(xyDiff)

for row in range(0, len(xyObs)-1):
    xyDiff = xyD1[row + 1] - xyD1[row]
    xyD2.append(xyDiff)
xyD2.append(xyDiff)

plt1 = plt.figure(1)
plt1.set_figheight(10)
plt1.set_figwidth(10) 
plt2 = plt1.add_subplot(221)
plt2.set(xlabel = '2 theta')
plt2.set_ylabel('Intensity')  
plt.plot(xyDeg, xyObs)

plt3 = plt1.add_subplot(222)
plt3.set(xlabel = '2 theta')
plt3.set_ylabel('DerIntensity')
plt.plot(xyDeg, xyD1)

plt4 = plt1.add_subplot(223)
plt4.set(xlabel = 'Time (min)')
plt4.set_ylabel('Al SF')
plt.plot(xyDeg, xyD2)

#plt5 = plt1.add_subplot(224)
#plt5.set(xlabel = 'Time (min)')
#plt5.set_ylabel('PV to FTO')
#plt.plot(Thymes, PVtoFTOs)
plt.show()